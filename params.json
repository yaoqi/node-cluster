{"name":"Node-cluster","body":"[![Build Status](https://secure.travis-ci.org/aleafs/node-cluster.png)](http://travis-ci.org/aleafs/node-cluster)\r\n\r\nThis logo is on the other side of the GFW!\r\n\r\n# 特性\r\n\r\n`node-cluster` 是一个简单易用的 NodeJS 类库，帮助开发人员快速地搭建基于NodeJS的服务程序：\r\n\r\n* 基于 master + worker 模式，能够有效利用多核处理器;\r\n* 支持多端口监听，master 传递请求端的 socket fd 给各个 worker，性能损失极低;\r\n* 同一端口下的多个 worker 之间提供简单的负载均衡支持;\r\n* 支持对 worker 进程数的监控，支持单个 worker 根据已处理的请求数自动消亡;\r\n* 支持 master 和 worker 的平滑重启 (SIGTERM)，不丢失请求;\r\n* 支持通过向 master 发送 SIGUSR1 信号实现所有worker的自动重载.\r\n\r\n# 安装\r\n\r\n```bash\r\n$ npm install node-cluster\r\n```\r\n\r\n# 使用\r\n\r\nnode-cluster的调用十分简单，核心调用代码不超过10行。请看下面的调用方法。  \r\ndispatch.js:\r\n\r\n```javascript\r\nvar cluster = require('node-cluster');\r\n\r\nvar master = new cluster.Master();\r\nmaster.register(8080, 'app.js');\r\nmaster.on('restartgiveup', function(port, msg) {\r\n  // alert:\r\n}).dispatch();\r\n```\r\n\r\napp.js：\r\n\r\n```javascript\r\nvar cluster = require('node-cluster');\r\nvar server  = require('http').createServer(function (req, res) {\r\n  // TODO\r\n});\r\n\r\nvar worker = new cluster.Worker();\r\nworker.ready(function (socket) {\r\n  server.emit('connection', socket);\r\n});\r\n```\r\n\r\n执行：`node dispatch.js`即可。\r\n\r\n# 示例\r\n\r\ndemo目录下提供了一个典型的示例，你可以通过下列命令启动这个服务：\r\n\r\n```bash\r\n$ node demo/main.js &\r\n```\r\n\r\n其中:\r\n\r\n* main.js 是master进程，通过 register 方法注册 worker进程，并通过 dispatch 进行工作; 除此之外，master 进程不需要做任何工作，你就可以实现一个高稳定性的生产服务;\r\n* worker/http.js 提供了监听在 33749 端口上的 HTTP 服务; 通过NodeJS 原生的http模块实现，demo中仅提供了 hello world的示例;\r\n* worker/echo.js 提供监听在 8080 端口上的Socket应答服务.\r\n* worker/multi_port_http.js 提供了监听在 33750 和 33751 端口上的 HTTP 服务; 通过NodeJS 原生的http模块实现，demo中仅提供了 hello world的示例;\r\n\r\n## 结合 [connect](https://github.com/senchalabs/connect) 使用\r\n\r\n* [dispatch.js](/fengmk2/node-cluster/blob/master/demo/connect/dispatch.js)\r\n\r\n```javascript\r\nvar cluster = require('node-cluster');\r\n\r\nvar master = cluster.Master();\r\nmaster.register(19841, __dirname + '/app.js').dispatch();\r\n```\r\n\r\n* [app.js](/fengmk2/node-cluster/blob/master/demo/connect/app.js)\r\n\r\n```javascript\r\nvar cluster = require('node-cluster');\r\nvar connect = require('connect');\r\n\r\nvar app = connect(connect.static(__dirname));\r\n\r\napp.use(function(req, res) {\r\n  res.end(req.url + ', pid ' + process.pid);\r\n});\r\n\r\nvar admin = cluster.Worker();\r\nadmin.ready(function(socket) {\r\n  app.emit('connection', socket);\r\n});\r\n```\r\n\r\n* start \r\n\r\n```bash\r\n$ node demo/connect/dispatch.js\r\n```\r\n\r\n## 结合 [webjs](https://github.com/iwillwen/webjs) 开发\r\n\r\nwebjs原生支持node-cluster哦，亲~\r\n                                ————小问  \r\n修改步骤十分简单，在webjs生成的代码中：\r\n\r\n- server.js\r\n\r\n```javascript\r\nvar cluster = require('node-cluster');\r\n\r\nvar master = new cluster.Master();\r\nmaster.register(80, __dirname + 'controllers/index.js').dispatch();\r\n```\r\n\r\n- /controllers/index.js\r\n\r\n  增加以下代码\r\n\r\n```javascript\r\nvar cluster = require('node-cluster');\r\n\r\nweb.run(65536);  //把原本的80改成其他端口，以免冲突\r\n\r\nvar worker = cluster.Worker();\r\nworker.ready(function(socket) {\r\n    web.server.emit('connection', socket);\r\n});\r\n```\r\n\r\n## 结合[express](https://github.com/visionmedia/express)\r\n\r\n感谢[@yuest](https://github.com/yuest) 提供[Express使用说明](https://github.com/aleafs/node-cluster/issues/6#issuecomment-4516724).\r\n\r\n```javascript\r\nvar app = require('express').createServer()\r\napp.get('/error', function(req, res, next) {\r\n next(new Error('error'));\r\n});\r\napp.error(function(err, req, res) {\r\n res.statusCode = 500;\r\n res.end(err.message);\r\n});\r\n\r\n//app.listen(8080); //没问题\r\n\r\n//使用 node-cluster 有问题\r\n//因为 app 没有触发 listening\r\n//可以在此加一句\r\n//app.emit('listening');\r\n\r\nvar worker = require('node-cluster').Worker();\r\nworker.ready(function(socket) {\r\n app.emit('connection', socket);\r\n});\r\n```\r\n\r\n不过推荐不使用 `app.error`，而用 `app.use(function(err, req, res, next) {})` 四个参数的 `middleware`\r\nexpress 3.0 会去掉 `app.error`\r\n\r\n# 原理\r\n\r\n请参考我的同事windyrobin的这篇文章：\r\n[NodeJs 多核多进程并行框架实作](http://club.cnodejs.org/topic/4f16442ccae1f4aa27001081) \r\n\r\n本文的 `node-cluster` 在核心功能的实现原理上没有任何新意，只是对代码的组织做了更友好的封装，同时加入了一些基于稳定性考虑的特性.\r\n\r\n# 注意\r\n\r\n* worker 进程中的 `remain` 变量，是判断一个 worker 是否空闲的依据; 因此我强烈建议在你的应用程序 worker 进程中，采用更优雅的幂等操作对其计数，并且通过 `worker.release(remain)` 的方法回写;\r\n\r\n# Authors\r\n\r\nBelow is the output from `git-summary`.\r\n\r\n```\r\n project: node-cluster\r\n commits: 98\r\n files  : 18\r\n authors: \r\n    73  aleafs                  74.5%\r\n    11  fengmk2                 11.2%\r\n     6  Jackson Tian            6.1%\r\n     6  aleafs zhang            6.1%\r\n     1  Will Wen Gunn           1.0%\r\n     1  pengchun                1.0%\r\n\r\n```\r\n","tagline":"A graceful node library to contribute a permanent \"master-worker\" server. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}